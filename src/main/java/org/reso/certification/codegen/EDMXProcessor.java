package org.reso.certification.codegen;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.reso.commander.common.Utils;
import org.reso.models.ReferenceStandardField;
import org.w3c.dom.Document;
import org.w3c.dom.bootstrap.DOMImplementationRegistry;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSOutput;
import org.w3c.dom.ls.LSSerializer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedHashMap;
import java.util.Map;

import static org.reso.commander.common.DataDictionaryMetadata.getKeyFieldForResource;

//TODO: switch to build an XML document rather than creating it as a string
public class EDMXProcessor extends WorksheetProcessor {
  final static String EMPTY_STRING = "";
  final static String RESO_NAMESPACE = "org.reso.metadata";
  final static String closingDataServicesTag = "</edmx:DataServices></edmx:Edmx>";
  private static final Logger LOG = LogManager.getLogger(EDMXProcessor.class);

  public EDMXProcessor(String version) {
    super(version);
  }

  final String openingDataServicesTag =
      "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
          + "<!-- This file was autogenerated from " + getReferenceWorksheet(this.getVersion()) + " on: " + Utils.getIsoTimestamp() + " -->"
          + "<edmx:Edmx xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\" Version=\"4.0\">"
          + "<edmx:DataServices>";

  private static String sanitizeXml(String input) {
    return input.replace("&", "&amp;")
        .replace(">", "&gt;")
        .replace("<", "&lt;")
        .replace("'", "&apos;")
        .replace("\"", "&quot;");
  }

  private String getKeyMarkup(String resourceName) {
    if (resourceName == null) return null;

    String targetKeyName = getKeyFieldForResource(resourceName);

    return targetKeyName != null ?
        "<Key>"
            + "<PropertyRef Name=\"" + targetKeyName + "\" />"
            + "</Key>" : null;
  }

  @Override
  void processNumber(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildNumberMember(field));
  }

  @Override
  void processStringListSingle(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildEnumTypeSingleMember(field));
  }

  @Override
  void processString(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildStringMember(field));
  }

  @Override
  void processBoolean(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildBooleanMember(field));
  }

  @Override
  void processStringListMulti(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildEnumTypeMultiMember(field));
  }

  @Override
  void processDate(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildDateMember(field));
  }

  @Override
  void processTimestamp(ReferenceStandardField field) {
    resourceTemplates.get(field.getResourceName()).append(EDMXTemplates.buildDateTimeWithOffsetMember(field));
  }

  @Override
  void processExpansion(ReferenceStandardField field) {
    StringBuilder content = new StringBuilder();

    final String simpleDataType = field.getSimpleDataType().trim();

    content.append("<NavigationProperty")
        .append(" Name=\"").append(field.getStandardName()).append("\"");

    if (simpleDataType.compareTo(WELL_KNOWN_DATA_TYPES.COLLECTION) == 0) {
      content.append(" Type=\"Collection(org.reso.metadata.").append(field.getSourceResource()).append(")\"");
    } else if (simpleDataType.compareTo(WELL_KNOWN_DATA_TYPES.RESOURCE) == 0) {
      content.append(" Type=\"org.reso.metadata.").append(field.getSourceResource()).append("\"");
    } else {
      //unsupported type, just exit without adding content
      LOG.error("ERROR: Unsupported simple data type for Expansion fields: '{}'", simpleDataType);
      return;
    }
    content.append(">");

    content.append(EDMXTemplates.buildDisplayNameAnnotation(field.getDisplayName()))
        .append(EDMXTemplates.buildDDWikiUrlAnnotation(field.getWikiPageUrl()))
        .append(EDMXTemplates.buildDescriptionAnnotation(field.getDefinition()))
        .append(EDMXTemplates.buildPayloadsAnnotation(String.join(",", field.getPayloads())));

    content.append("</NavigationProperty>");

    resourceTemplates.get(field.getResourceName()).append(content);
  }

  @Override
  void generateOutput() {
    try {
      final String output =
          openingDataServicesTag
              + buildEntityTypeMarkup()
              + buildEnumTypeMarkup()
              + closingDataServicesTag;

      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setValidating(false);
      DocumentBuilder db = dbf.newDocumentBuilder();
      Document document = db.parse(new ByteArrayInputStream(output.getBytes()));

      DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();
      DOMImplementationLS domImplementation = (DOMImplementationLS) registry.getDOMImplementation("LS");

      Writer stringWriter = new StringWriter();
      LSOutput formattedOutput = domImplementation.createLSOutput();
      formattedOutput.setCharacterStream(stringWriter);

      LSSerializer lsSerializer = domImplementation.createLSSerializer();
      lsSerializer.getDomConfig().setParameter("format-pretty-print", true);
      lsSerializer.getDomConfig().setParameter("xml-declaration", true);
      lsSerializer.write(document, formattedOutput);

      final String formattedOutputString = stringWriter.toString(),
          filename = getDataDictionarySpecification().replace(".xlsx", ".xml");

      LOG.info("Writing " + formattedOutputString.getBytes().length + " bytes to file: " + filename + "...");

      //write content of the string to the same directory as the source file
      Utils.createFile(getDirectoryName(), filename, output);

      LOG.info("XML Metadata file written!");

    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  private String buildEntityContainerMarkup() {
    StringBuilder content = new StringBuilder();
    content.append("<EntityContainer Name=\"RESO\">");
    resourceTemplates.forEach((resourceName, templateContent) ->
        content
            .append("<EntitySet Name=\"")
            .append(resourceName).append("\" EntityType=\"" + RESO_NAMESPACE)
            .append(".")
            .append(resourceName).append("\" />"));
    content.append("</EntityContainer>");
    return content.toString();
  }

  private String buildEntityTypeMarkup() {
    StringBuilder content = new StringBuilder();
    content.append("<Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"" + RESO_NAMESPACE + "\">");

    //iterate through each of the found resources and generate their edm:EntityType content
    resourceTemplates.forEach((resourceName, buffer) -> {
      content.append("<EntityType Name=\"").append(resourceName).append("\">");
      content.append(getKeyMarkup(resourceName));
      content.append(buffer.toString());
      content.append("</EntityType>");
    });

    //nest entity container in main namespace
    content.append(buildEntityContainerMarkup());

    content.append("</Schema>");
    return content.toString();
  }

  private String buildEnumTypeMarkup() {
    //enumeration markup keyed by enumeration standard name
    Map<String, String> markupMap = new LinkedHashMap<>();

    //add opening tag for enums namespace
    StringBuilder content =
        new StringBuilder("<Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"" + RESO_NAMESPACE + ".enums\">");

    standardFieldsMap.forEach((resourceName, standardFieldMap) -> standardFieldMap.forEach((standardName, referenceStandardField) -> {
      if (referenceStandardField.isSingleEnumeration()) {
        markupMap.putIfAbsent(referenceStandardField.getLookupName(), buildSingleEnumTypeMarkup(referenceStandardField));
      }

      if (referenceStandardField.isMultipleEnumeration()) {
        markupMap.putIfAbsent(referenceStandardField.getLookupName(), buildMultipleEnumTypeMarkup(referenceStandardField));
      }
    }));

    markupMap.forEach((lookupStandardName, markup) -> content.append(markup));

    //closing tag for enums schema definition
    content.append("</Schema>");
    return content.toString();
  }

  private String buildSingleEnumTypeMarkup(ReferenceStandardField standardField) {
    StringBuilder content = new StringBuilder();

    if (getEnumerations().get(standardField.getLookupName()) != null) {
      content.append("<EnumType Name=\"").append(standardField.getLookupName()).append("\">");

      //iterate through each of the lookup values and generate their edm:EnumType content
      getEnumerations().get(standardField.getLookupName()).forEach(lookup -> content
          .append("<Member Name=\"").append(lookup.getLegacyODataValue()).append("\">")
          .append(EDMXTemplates.buildDisplayNameAnnotation(lookup.getLookupValue()))
          .append(EDMXTemplates.buildDDWikiUrlAnnotation(lookup.getWikiPageUrl()))
          .append(EDMXTemplates.buildDescriptionAnnotation(lookup.getDefinition()))
          .append("</Member>"));

      content.append("</EnumType>");
    } else {
      content
          .append("<EnumType Name=\"").append(standardField.getLookupName()).append("\">")
          .append("\n<!-- TODO: implement if you are using the single-valued enumeration \"")
          .append(standardField.getLookupName()).append("\" -->")
          .append("<Member Name=\"Sample").append(standardField.getLookupName()).append("EnumValue").append("\"/>")
          .append("</EnumType>");
    }
    return content.toString();
  }

  private String buildMultipleEnumTypeMarkup(ReferenceStandardField standardField) {
    StringBuilder content = new StringBuilder();

    if (getEnumerations().get(standardField.getLookupName()) != null) {
      content.append("<EnumType Name=\"").append(standardField.getLookupName()).append("\">");

      //iterate through each of the lookup values and generate their edm:EnumType content
      getEnumerations().get(standardField.getLookupName()).forEach(lookup -> content
          .append("<Member Name=\"").append(lookup.getLegacyODataValue()).append("\">")
          .append(EDMXTemplates.buildDisplayNameAnnotation(lookup.getLookupValue()))
          .append(EDMXTemplates.buildDDWikiUrlAnnotation(lookup.getWikiPageUrl()))
          .append(EDMXTemplates.buildDescriptionAnnotation(lookup.getDefinition()))
          .append("</Member>"));

      content.append("</EnumType>");
    } else {
      content
          .append("<EnumType Name=\"").append(standardField.getLookupName()).append("\">")
          .append("\n<!-- TODO: implement if you are using the multi-valued enumeration \"").append(standardField.getLookupName()).append("\" -->")
          .append("<Member Name=\"Sample").append(standardField.getStandardName()).append("EnumValue").append("\">")
          .append(EDMXTemplates.buildDDWikiUrlAnnotation(standardField.getWikiPageUrl()))
          .append(EDMXTemplates.buildDescriptionAnnotation(standardField.getDefinition()))
          .append("</Member>")
          .append("</EnumType>");
    }
    return content.toString();
  }

  public static final class EDMXTemplates {
    public static String buildDisplayNameAnnotation(String content) {
      if (content == null || content.isEmpty()) return EMPTY_STRING;
      return String.format("<Annotation Term=\"RESO.OData.Metadata.StandardName\" String=\"%1$s\" />", sanitizeXml(content));
    }

    public static String buildPayloadsAnnotation(String content) {
      if (content == null || content.isEmpty()) return EMPTY_STRING;
      return String.format("<Annotation Term=\"RESO.OData.Metadata.Payloads\" String=\"%1$s\" />", sanitizeXml(content));
    }

    //wrapColumns(referenceStandardField.getDefinition().replaceAll("--", "-"), "   ")
    public static String buildDescriptionAnnotation(String content) {
      if (content == null || content.isEmpty()) return EMPTY_STRING;
      return String.format("<Annotation Term=\"Core.Description\" String=\"%1$s\" />", sanitizeXml(content));
    }

    public static String buildDDWikiUrlAnnotation(String content) {
      if (content == null || content.isEmpty()) return EMPTY_STRING;
      return String.format("<Annotation Term=\"RESO.DDWikiUrl\" String=\"%1$s\" />", sanitizeXml(content));
    }

    public static String buildBooleanMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      return "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.Boolean\" >"
          + buildDisplayNameAnnotation(field.getDisplayName())
          + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
          + buildDescriptionAnnotation(field.getDefinition())
          + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
          + "</Property>";
    }

    public static String buildDateMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      return "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.Date\" >"
          + buildDisplayNameAnnotation(field.getDisplayName())
          + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
          + buildDescriptionAnnotation(field.getDefinition())
          + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
          + "</Property>";
    }

    public static String buildNumberMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      if (field.getSuggestedMaxPrecision() != null) return buildDecimalMember(field);
      else return buildIntegerMember(field);
    }

    public static String buildDecimalMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      String template = "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.Decimal\"";

      //DD uses length as precision in this case
      if (field.getSuggestedMaxLength() != null) template += " Precision=\"" + field.getSuggestedMaxLength() + "\"";

      //DD uses precision as scale in this case
      if (field.getSuggestedMaxPrecision() != null) template += " Scale=\"" + field.getSuggestedMaxPrecision() + "\"";

      template += " >"
          + buildDisplayNameAnnotation(field.getDisplayName())
          + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
          + buildDescriptionAnnotation(field.getDefinition())
          + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
          + "</Property>";

      return template;
    }

    public static String buildIntegerMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      return "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.Int64\" >"
          + buildDisplayNameAnnotation(field.getDisplayName())
          + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
          + buildDescriptionAnnotation(field.getDefinition())
          + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
          + "</Property>";
    }

    public static String buildEnumTypeSingleMember(ReferenceStandardField field) {
      if (field == null || field.getLookupName() == null) return EMPTY_STRING;
      if (field.getLookupName().trim().isEmpty()) return EMPTY_STRING;

      return
          "<Property Name=\"" + field.getStandardName()
              + "\" Type=\"" + RESO_NAMESPACE + ".enums." + field.getLookupName() + "\" >"
              + buildDisplayNameAnnotation(field.getDisplayName())
              + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
              + buildDescriptionAnnotation(field.getDefinition())
              + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
              + "</Property>";
    }

    public static String buildEnumTypeMultiMember(ReferenceStandardField field) {
      if (field == null || field.getLookupName() == null) return EMPTY_STRING;
      if (field.getLookupName().trim().isEmpty()) return EMPTY_STRING;

      return
          "<Property Name=\"" + field.getStandardName()
              + "\" Type=\"Collection(" + RESO_NAMESPACE + ".enums." + field.getLookupName() + ")\">"
              + buildDisplayNameAnnotation(field.getDisplayName())
              + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
              + buildDescriptionAnnotation(field.getDefinition())
              + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
              + "</Property>";

    }

    public static String buildStringMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      String template = "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.String\"";

      if (field.getSuggestedMaxLength() != null) template += " MaxLength=\"" + field.getSuggestedMaxLength() + "\"";
      template += " >";

      template +=
          buildDisplayNameAnnotation(field.getDisplayName())
              + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
              + buildDescriptionAnnotation(field.getDefinition())
              + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
              + "</Property>";

      return template;
    }

    public static String buildDateTimeWithOffsetMember(ReferenceStandardField field) {
      if (field == null) return EMPTY_STRING;
      String template = "<Property Name=\"" + field.getStandardName() + "\" Type=\"Edm.DateTimeOffset\"";

      if (field.getSuggestedMaxLength() != null) template += " Precision=\"" + field.getSuggestedMaxLength() + "\"";
      template += " >";

      template +=
          buildDisplayNameAnnotation(field.getDisplayName())
              + buildDDWikiUrlAnnotation(field.getWikiPageUrl())
              + buildDescriptionAnnotation(field.getDefinition())
              + buildPayloadsAnnotation(String.join(",", field.getPayloads()))
              + "</Property>";
      return template;
    }

  }
}